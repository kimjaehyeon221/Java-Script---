//객체
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title></title>
</head>
<body>
	<ul>
	<li>egoing</li>
	<li>graphiite</li>
	<li>leezche</li>
	</ul>

<script type="text/javascript">
	var grades = {'egoing': 10, 'k8805': 6, 'sorialgi':60}
	for(key in grades){
    document.write("<li>key : " +key+ "value :" +grades[key]+ "</li>")//html control
}
	var grades ={
		'list' : {'egoing' : 10, 'k8805' : 8, 'sorialgi' : 80}
		'show' : function(){
			for(var name in this.list){
				console.log(name, this.list[name]);
			}
		}
	}
	//alert(grades['list']['egoing']);
	//grades['show']();
	grades.show();
</script>
</body>
</html>

//모듈 -> 모듈을 하는 이유는 무엇일까. 작은 부품들의 합체인 프로그램을 작은 것들로 나누어 분리하게 되면
전체적인 프로그램의 유지와 보수가 쉬워진다. 이는 재활용성과 직결되는 개념이다. 
//main.html의 내용
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <script type="text/javascript" src = "greeting.js"></script>//type="text/javascript"생략가능하다.
</head>
<body>
    <script>
        alert(welcome());
    </script>
</body>
</html>

//greeting.js
function welcome(){
        return 'Hello world';
}

//라이브러리는 모듈과 비슷한 개념. 
모듈이 프로그램을 구성하는 작은 부품으로서의 로직을 의미한다면
라이브러리는 자주 사용되는 로직을 재사용하기 편리하도록
잘 정리한 일련의 코드들의 집합을 의미한다고 할 수 있다. -> 생활코딩 퍼옴.

//라이브러리를 다운로드 하는 것과 API Documentation의 기능을 살펴보는 것이 
라이브러리를 사용하는데 앞서 가장 중요하다.

//생활코딩 JQuery 라이브러리 효용성 예제 
<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
</head>
<body>
    <ul id="list">
        <li>empty</li>
        <li>empty</li>
        <li>empty</li>
        <li>empty</li>
    </ul>
    <input id="execute_btn" type="button" value="execute" />
    <script type="text/javascript">
     $('#execute_btn').click(function(){
        $('#list li').text('coding everybody');
     })
    </script>
</body>
</html>

//UI와 API, 문서 = 교양수업 개념
//UI = User Interface
//API = Application programming Interface

//reference와 tutorial
//ECMAScript(표준문서)





