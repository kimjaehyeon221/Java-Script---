var vscope = 'global';
function fscope(){
  var vscope= 'local';
      vscope = 'local'
}
fscope();
alert(vscope)

--> global이 호출된다. because var이 함수되서 정의될 경우 지역변수를 생성하기 때문이다.
다른 프로그래머가 짠 로직과의 충돌을 피하기 위해 
전역 변수보다 지역 변수를 사용할 것.
그리고 언제나 var을 사용하는 것이 바람직하다. 

//유효범위의 효용
 function a (){
    var i = 0;
}
for(var i = 0; i < 5; i++){
    a();
    document.write(i);
} --> 01234

function a (){
    i = 0;
}
for(i = 0; i < 5; i++){
    a();
    document.write(i);
} --> 무한 반복

//전역변수의 사용
var MYAPP = {}
MYAPP.calculator = {
      'left' : null;
      'right': null;
}
MYAPP.coordinate = {
      'left' : null;
      'right': null;
}
MYAPP.calculator.left = 10;
MYapp.calculator.right = 20;
function sum (){
      return MYAPP.calculator.left +  MYAPP.calculator.right;
}
document.write(sum());

//해결법 전역변수를 허용하고 싶지 않을 때 --> 익명함수의 활용 (모듈화)
(functinon(){
var MYAPP = {}
MYAPP.calculator = {
      'left' : null;
      'right': null;
}
MYAPP.coordinate = {
      'left' : null;
      'right': null;
}
MYAPP.calculator.left = 10;
MYapp.calculator.right = 20;
function sum (){
      return MYAPP.calculator.left +  MYAPP.calculator.right;
}
document.write(sum());
}())

//유효범위의 대상이 무엇인가?
-> 자바스크립트의 지역 변수는 함수에서만 유효하다. 즉, 자바와 달리 for문 안에서 정의된 변수는 
지역 변수가 아닌 지역 변수로서 작동한다.

// 정적 유효범위
var i = 5;
function a(){
    var i = 10;
    b();
}

function b(){
    document.write(i);
}

a(); --> 자바스크립트는 함수가 선언된 시점에서의 유효범위를 갖기 때문에 5가 호출된다.
//이를 정적 유효 범위라고 한다.



//값으로서의 함수와 콜백 - 함수의 용도 1

function cal(func, num){
    return func(num)
}
function increase(num){
    return num+1
}
function decrease(num){
    return num-1
}
alert(cal(increase, 1));
alert(cal(decrease, 1));

--> increase라는 함수의 값이 다른 함수의 인자로 전달될 수 있다. 

a = {
    b:function(){
    }
}; --> 함수 a안에 담긴 b는 a의 속성이며 속성값으로 담겨진 b의 함수는 메소드라고 부른다.

//함수는 함수의 리턴 값으로 사용 가능
function cal(mode){
    var funcs = {
        'plus' : function(left, right){return left + right},
        'minus' : function(left, right){return left - right}
    }
    return funcs[mode];
}
alert(cal('plus')(2,1));
alert(cal('minus')(2,1));   

// 배열의 값으로도 사용 가능
var process = [
    function(input){ return input + 10;},
    function(input){ return input * input;},
    function(input){ return input / 2;}
];
var input = 1;
for(var i = 0; i < process.length; i++){
    input = process[i](input);
}
alert(input);

//콜백이란 
값으로서의 함수를 사용할 수 있기 때문에 오리지널 함수가 작동하는 것을 임의적으로 바꿀 수 있는 것이 바로 
콜백이다. 

function sortNumber(a,b){
    // 위의 예제와 비교해서 a와 b의 순서를 바꾸면 정렬순서가 반대가 된다.
    return b-a;
}
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
alert(numbers.sort(sortNumber)); // array, [20,10,9,8,7,6,5,4,3,2,1]

//비동기 처리 --> 콜백의 이용
해당 작업이 끝났을 때 미리 등록한 작업을 실행하도록 할 수 있다. 

